// Code generated by thriftgo (0.1.3). DO NOT EDIT.

package v1

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/biz-demo/open-payment-platform/kitex_gen/base"
	"strings"
)

type MerchantBaseInfo struct {
	MerchantType int8   `thrift:"merchant_type,1" json:"merchant_type"`
	FullName     string `thrift:"full_name,2" json:"full_name"`
	ShortName    string `thrift:"short_name,3" json:"short_name"`
	ServicePhone string `thrift:"service_phone,4" json:"service_phone"`
	MccCode      string `thrift:"mcc_code,5" json:"mcc_code"`
}

func NewMerchantBaseInfo() *MerchantBaseInfo {
	return &MerchantBaseInfo{}
}

func (p *MerchantBaseInfo) GetMerchantType() (v int8) {
	return p.MerchantType
}

func (p *MerchantBaseInfo) GetFullName() (v string) {
	return p.FullName
}

func (p *MerchantBaseInfo) GetShortName() (v string) {
	return p.ShortName
}

func (p *MerchantBaseInfo) GetServicePhone() (v string) {
	return p.ServicePhone
}

func (p *MerchantBaseInfo) GetMccCode() (v string) {
	return p.MccCode
}
func (p *MerchantBaseInfo) SetMerchantType(val int8) {
	p.MerchantType = val
}
func (p *MerchantBaseInfo) SetFullName(val string) {
	p.FullName = val
}
func (p *MerchantBaseInfo) SetShortName(val string) {
	p.ShortName = val
}
func (p *MerchantBaseInfo) SetServicePhone(val string) {
	p.ServicePhone = val
}
func (p *MerchantBaseInfo) SetMccCode(val string) {
	p.MccCode = val
}

var fieldIDToName_MerchantBaseInfo = map[int16]string{
	1: "merchant_type",
	2: "full_name",
	3: "short_name",
	4: "service_phone",
	5: "mcc_code",
}

func (p *MerchantBaseInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MerchantBaseInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MerchantBaseInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.MerchantType = v
	}
	return nil
}

func (p *MerchantBaseInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FullName = v
	}
	return nil
}

func (p *MerchantBaseInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ShortName = v
	}
	return nil
}

func (p *MerchantBaseInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ServicePhone = v
	}
	return nil
}

func (p *MerchantBaseInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MccCode = v
	}
	return nil
}

func (p *MerchantBaseInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MerchantBaseInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MerchantBaseInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("merchant_type", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.MerchantType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MerchantBaseInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("full_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FullName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MerchantBaseInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("short_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShortName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MerchantBaseInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("service_phone", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ServicePhone); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MerchantBaseInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mcc_code", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MccCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MerchantBaseInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MerchantBaseInfo(%+v)", *p)
}

func (p *MerchantBaseInfo) DeepEqual(ano *MerchantBaseInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MerchantType) {
		return false
	}
	if !p.Field2DeepEqual(ano.FullName) {
		return false
	}
	if !p.Field3DeepEqual(ano.ShortName) {
		return false
	}
	if !p.Field4DeepEqual(ano.ServicePhone) {
		return false
	}
	if !p.Field5DeepEqual(ano.MccCode) {
		return false
	}
	return true
}

func (p *MerchantBaseInfo) Field1DeepEqual(src int8) bool {

	if p.MerchantType != src {
		return false
	}
	return true
}
func (p *MerchantBaseInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.FullName, src) != 0 {
		return false
	}
	return true
}
func (p *MerchantBaseInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ShortName, src) != 0 {
		return false
	}
	return true
}
func (p *MerchantBaseInfo) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ServicePhone, src) != 0 {
		return false
	}
	return true
}
func (p *MerchantBaseInfo) Field5DeepEqual(src string) bool {

	if strings.Compare(p.MccCode, src) != 0 {
		return false
	}
	return true
}

type LegalPerson struct {
	LegalName        string `thrift:"legal_name,1" json:"legal_name"`
	CredentialType   string `thrift:"credential_type,2" json:"credential_type"`
	IdCardNo         string `thrift:"id_card_no,3" json:"id_card_no"`
	IdCardFrontPic   string `thrift:"id_card_front_pic,4" json:"id_card_front_pic"`
	IdCardBackPic    string `thrift:"id_card_back_pic,5" json:"id_card_back_pic"`
	IdCardHandPic    string `thrift:"id_card_hand_pic,6" json:"id_card_hand_pic"`
	IdCardValidStart string `thrift:"id_card_valid_start,7" json:"id_card_valid_start"`
	IdCardValidEnd   string `thrift:"id_card_valid_end,8" json:"id_card_valid_end"`
}

func NewLegalPerson() *LegalPerson {
	return &LegalPerson{}
}

func (p *LegalPerson) GetLegalName() (v string) {
	return p.LegalName
}

func (p *LegalPerson) GetCredentialType() (v string) {
	return p.CredentialType
}

func (p *LegalPerson) GetIdCardNo() (v string) {
	return p.IdCardNo
}

func (p *LegalPerson) GetIdCardFrontPic() (v string) {
	return p.IdCardFrontPic
}

func (p *LegalPerson) GetIdCardBackPic() (v string) {
	return p.IdCardBackPic
}

func (p *LegalPerson) GetIdCardHandPic() (v string) {
	return p.IdCardHandPic
}

func (p *LegalPerson) GetIdCardValidStart() (v string) {
	return p.IdCardValidStart
}

func (p *LegalPerson) GetIdCardValidEnd() (v string) {
	return p.IdCardValidEnd
}
func (p *LegalPerson) SetLegalName(val string) {
	p.LegalName = val
}
func (p *LegalPerson) SetCredentialType(val string) {
	p.CredentialType = val
}
func (p *LegalPerson) SetIdCardNo(val string) {
	p.IdCardNo = val
}
func (p *LegalPerson) SetIdCardFrontPic(val string) {
	p.IdCardFrontPic = val
}
func (p *LegalPerson) SetIdCardBackPic(val string) {
	p.IdCardBackPic = val
}
func (p *LegalPerson) SetIdCardHandPic(val string) {
	p.IdCardHandPic = val
}
func (p *LegalPerson) SetIdCardValidStart(val string) {
	p.IdCardValidStart = val
}
func (p *LegalPerson) SetIdCardValidEnd(val string) {
	p.IdCardValidEnd = val
}

var fieldIDToName_LegalPerson = map[int16]string{
	1: "legal_name",
	2: "credential_type",
	3: "id_card_no",
	4: "id_card_front_pic",
	5: "id_card_back_pic",
	6: "id_card_hand_pic",
	7: "id_card_valid_start",
	8: "id_card_valid_end",
}

func (p *LegalPerson) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LegalPerson[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LegalPerson) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LegalName = v
	}
	return nil
}

func (p *LegalPerson) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CredentialType = v
	}
	return nil
}

func (p *LegalPerson) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IdCardNo = v
	}
	return nil
}

func (p *LegalPerson) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IdCardFrontPic = v
	}
	return nil
}

func (p *LegalPerson) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IdCardBackPic = v
	}
	return nil
}

func (p *LegalPerson) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IdCardHandPic = v
	}
	return nil
}

func (p *LegalPerson) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IdCardValidStart = v
	}
	return nil
}

func (p *LegalPerson) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IdCardValidEnd = v
	}
	return nil
}

func (p *LegalPerson) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LegalPerson"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LegalPerson) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("legal_name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LegalName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *LegalPerson) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("credential_type", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CredentialType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *LegalPerson) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id_card_no", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdCardNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *LegalPerson) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id_card_front_pic", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdCardFrontPic); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *LegalPerson) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id_card_back_pic", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdCardBackPic); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *LegalPerson) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id_card_hand_pic", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdCardHandPic); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *LegalPerson) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id_card_valid_start", thrift.STRING, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdCardValidStart); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *LegalPerson) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id_card_valid_end", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdCardValidEnd); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *LegalPerson) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LegalPerson(%+v)", *p)
}

func (p *LegalPerson) DeepEqual(ano *LegalPerson) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LegalName) {
		return false
	}
	if !p.Field2DeepEqual(ano.CredentialType) {
		return false
	}
	if !p.Field3DeepEqual(ano.IdCardNo) {
		return false
	}
	if !p.Field4DeepEqual(ano.IdCardFrontPic) {
		return false
	}
	if !p.Field5DeepEqual(ano.IdCardBackPic) {
		return false
	}
	if !p.Field6DeepEqual(ano.IdCardHandPic) {
		return false
	}
	if !p.Field7DeepEqual(ano.IdCardValidStart) {
		return false
	}
	if !p.Field8DeepEqual(ano.IdCardValidEnd) {
		return false
	}
	return true
}

func (p *LegalPerson) Field1DeepEqual(src string) bool {

	if strings.Compare(p.LegalName, src) != 0 {
		return false
	}
	return true
}
func (p *LegalPerson) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CredentialType, src) != 0 {
		return false
	}
	return true
}
func (p *LegalPerson) Field3DeepEqual(src string) bool {

	if strings.Compare(p.IdCardNo, src) != 0 {
		return false
	}
	return true
}
func (p *LegalPerson) Field4DeepEqual(src string) bool {

	if strings.Compare(p.IdCardFrontPic, src) != 0 {
		return false
	}
	return true
}
func (p *LegalPerson) Field5DeepEqual(src string) bool {

	if strings.Compare(p.IdCardBackPic, src) != 0 {
		return false
	}
	return true
}
func (p *LegalPerson) Field6DeepEqual(src string) bool {

	if strings.Compare(p.IdCardHandPic, src) != 0 {
		return false
	}
	return true
}
func (p *LegalPerson) Field7DeepEqual(src string) bool {

	if strings.Compare(p.IdCardValidStart, src) != 0 {
		return false
	}
	return true
}
func (p *LegalPerson) Field8DeepEqual(src string) bool {

	if strings.Compare(p.IdCardValidEnd, src) != 0 {
		return false
	}
	return true
}

type MerchantContact struct {
	Name              string `thrift:"name,1" json:"name"`
	IdCardNo          string `thrift:"id_card_no,2" json:"id_card_no"`
	MobilePhoneNumber string `thrift:"mobile_phone_number,3" json:"mobile_phone_number"`
}

func NewMerchantContact() *MerchantContact {
	return &MerchantContact{}
}

func (p *MerchantContact) GetName() (v string) {
	return p.Name
}

func (p *MerchantContact) GetIdCardNo() (v string) {
	return p.IdCardNo
}

func (p *MerchantContact) GetMobilePhoneNumber() (v string) {
	return p.MobilePhoneNumber
}
func (p *MerchantContact) SetName(val string) {
	p.Name = val
}
func (p *MerchantContact) SetIdCardNo(val string) {
	p.IdCardNo = val
}
func (p *MerchantContact) SetMobilePhoneNumber(val string) {
	p.MobilePhoneNumber = val
}

var fieldIDToName_MerchantContact = map[int16]string{
	1: "name",
	2: "id_card_no",
	3: "mobile_phone_number",
}

func (p *MerchantContact) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MerchantContact[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MerchantContact) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *MerchantContact) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.IdCardNo = v
	}
	return nil
}

func (p *MerchantContact) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MobilePhoneNumber = v
	}
	return nil
}

func (p *MerchantContact) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MerchantContact"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MerchantContact) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MerchantContact) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id_card_no", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.IdCardNo); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MerchantContact) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mobile_phone_number", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MobilePhoneNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MerchantContact) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MerchantContact(%+v)", *p)
}

func (p *MerchantContact) DeepEqual(ano *MerchantContact) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.IdCardNo) {
		return false
	}
	if !p.Field3DeepEqual(ano.MobilePhoneNumber) {
		return false
	}
	return true
}

func (p *MerchantContact) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *MerchantContact) Field2DeepEqual(src string) bool {

	if strings.Compare(p.IdCardNo, src) != 0 {
		return false
	}
	return true
}
func (p *MerchantContact) Field3DeepEqual(src string) bool {

	if strings.Compare(p.MobilePhoneNumber, src) != 0 {
		return false
	}
	return true
}

type MerchantAddress struct {
	ProvinceCode string `thrift:"province_code,1" json:"province_code"`
	CityCode     string `thrift:"city_code,2" json:"city_code"`
	AreaCode     string `thrift:"area_code,3" json:"area_code"`
	Address      string `thrift:"address,4" json:"address"`
}

func NewMerchantAddress() *MerchantAddress {
	return &MerchantAddress{}
}

func (p *MerchantAddress) GetProvinceCode() (v string) {
	return p.ProvinceCode
}

func (p *MerchantAddress) GetCityCode() (v string) {
	return p.CityCode
}

func (p *MerchantAddress) GetAreaCode() (v string) {
	return p.AreaCode
}

func (p *MerchantAddress) GetAddress() (v string) {
	return p.Address
}
func (p *MerchantAddress) SetProvinceCode(val string) {
	p.ProvinceCode = val
}
func (p *MerchantAddress) SetCityCode(val string) {
	p.CityCode = val
}
func (p *MerchantAddress) SetAreaCode(val string) {
	p.AreaCode = val
}
func (p *MerchantAddress) SetAddress(val string) {
	p.Address = val
}

var fieldIDToName_MerchantAddress = map[int16]string{
	1: "province_code",
	2: "city_code",
	3: "area_code",
	4: "address",
}

func (p *MerchantAddress) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MerchantAddress[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MerchantAddress) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ProvinceCode = v
	}
	return nil
}

func (p *MerchantAddress) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CityCode = v
	}
	return nil
}

func (p *MerchantAddress) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AreaCode = v
	}
	return nil
}

func (p *MerchantAddress) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Address = v
	}
	return nil
}

func (p *MerchantAddress) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MerchantAddress"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MerchantAddress) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("province_code", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ProvinceCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MerchantAddress) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("city_code", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CityCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MerchantAddress) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("area_code", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AreaCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MerchantAddress) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("address", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Address); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MerchantAddress) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MerchantAddress(%+v)", *p)
}

func (p *MerchantAddress) DeepEqual(ano *MerchantAddress) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ProvinceCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.CityCode) {
		return false
	}
	if !p.Field3DeepEqual(ano.AreaCode) {
		return false
	}
	if !p.Field4DeepEqual(ano.Address) {
		return false
	}
	return true
}

func (p *MerchantAddress) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ProvinceCode, src) != 0 {
		return false
	}
	return true
}
func (p *MerchantAddress) Field2DeepEqual(src string) bool {

	if strings.Compare(p.CityCode, src) != 0 {
		return false
	}
	return true
}
func (p *MerchantAddress) Field3DeepEqual(src string) bool {

	if strings.Compare(p.AreaCode, src) != 0 {
		return false
	}
	return true
}
func (p *MerchantAddress) Field4DeepEqual(src string) bool {

	if strings.Compare(p.Address, src) != 0 {
		return false
	}
	return true
}

type MerchantLicenseInfo struct {
	LicenseNumber           string `thrift:"license_number,1" json:"license_number"`
	LicenseMerchantFullName string `thrift:"license_merchant_full_name,2" json:"license_merchant_full_name"`
	Address                 string `thrift:"address,3" json:"address"`
	ValidStartTime          string `thrift:"valid_start_time,4" json:"valid_start_time"`
	ValidEndTime            string `thrift:"valid_end_time,5" json:"valid_end_time"`
	LicensePic              string `thrift:"license_pic,6" json:"license_pic"`
}

func NewMerchantLicenseInfo() *MerchantLicenseInfo {
	return &MerchantLicenseInfo{}
}

func (p *MerchantLicenseInfo) GetLicenseNumber() (v string) {
	return p.LicenseNumber
}

func (p *MerchantLicenseInfo) GetLicenseMerchantFullName() (v string) {
	return p.LicenseMerchantFullName
}

func (p *MerchantLicenseInfo) GetAddress() (v string) {
	return p.Address
}

func (p *MerchantLicenseInfo) GetValidStartTime() (v string) {
	return p.ValidStartTime
}

func (p *MerchantLicenseInfo) GetValidEndTime() (v string) {
	return p.ValidEndTime
}

func (p *MerchantLicenseInfo) GetLicensePic() (v string) {
	return p.LicensePic
}
func (p *MerchantLicenseInfo) SetLicenseNumber(val string) {
	p.LicenseNumber = val
}
func (p *MerchantLicenseInfo) SetLicenseMerchantFullName(val string) {
	p.LicenseMerchantFullName = val
}
func (p *MerchantLicenseInfo) SetAddress(val string) {
	p.Address = val
}
func (p *MerchantLicenseInfo) SetValidStartTime(val string) {
	p.ValidStartTime = val
}
func (p *MerchantLicenseInfo) SetValidEndTime(val string) {
	p.ValidEndTime = val
}
func (p *MerchantLicenseInfo) SetLicensePic(val string) {
	p.LicensePic = val
}

var fieldIDToName_MerchantLicenseInfo = map[int16]string{
	1: "license_number",
	2: "license_merchant_full_name",
	3: "address",
	4: "valid_start_time",
	5: "valid_end_time",
	6: "license_pic",
}

func (p *MerchantLicenseInfo) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MerchantLicenseInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MerchantLicenseInfo) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LicenseNumber = v
	}
	return nil
}

func (p *MerchantLicenseInfo) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LicenseMerchantFullName = v
	}
	return nil
}

func (p *MerchantLicenseInfo) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Address = v
	}
	return nil
}

func (p *MerchantLicenseInfo) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ValidStartTime = v
	}
	return nil
}

func (p *MerchantLicenseInfo) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ValidEndTime = v
	}
	return nil
}

func (p *MerchantLicenseInfo) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LicensePic = v
	}
	return nil
}

func (p *MerchantLicenseInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MerchantLicenseInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MerchantLicenseInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("license_number", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LicenseNumber); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MerchantLicenseInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("license_merchant_full_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LicenseMerchantFullName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MerchantLicenseInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("address", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Address); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MerchantLicenseInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valid_start_time", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ValidStartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *MerchantLicenseInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("valid_end_time", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ValidEndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *MerchantLicenseInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("license_pic", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LicensePic); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *MerchantLicenseInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MerchantLicenseInfo(%+v)", *p)
}

func (p *MerchantLicenseInfo) DeepEqual(ano *MerchantLicenseInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.LicenseNumber) {
		return false
	}
	if !p.Field2DeepEqual(ano.LicenseMerchantFullName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Address) {
		return false
	}
	if !p.Field4DeepEqual(ano.ValidStartTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.ValidEndTime) {
		return false
	}
	if !p.Field6DeepEqual(ano.LicensePic) {
		return false
	}
	return true
}

func (p *MerchantLicenseInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.LicenseNumber, src) != 0 {
		return false
	}
	return true
}
func (p *MerchantLicenseInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.LicenseMerchantFullName, src) != 0 {
		return false
	}
	return true
}
func (p *MerchantLicenseInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Address, src) != 0 {
		return false
	}
	return true
}
func (p *MerchantLicenseInfo) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ValidStartTime, src) != 0 {
		return false
	}
	return true
}
func (p *MerchantLicenseInfo) Field5DeepEqual(src string) bool {

	if strings.Compare(p.ValidEndTime, src) != 0 {
		return false
	}
	return true
}
func (p *MerchantLicenseInfo) Field6DeepEqual(src string) bool {

	if strings.Compare(p.LicensePic, src) != 0 {
		return false
	}
	return true
}

type RegisterReq struct {
	Contact *MerchantContact `thrift:"contact,1" json:"contact"`
}

func NewRegisterReq() *RegisterReq {
	return &RegisterReq{}
}

var RegisterReq_Contact_DEFAULT *MerchantContact

func (p *RegisterReq) GetContact() (v *MerchantContact) {
	if !p.IsSetContact() {
		return RegisterReq_Contact_DEFAULT
	}
	return p.Contact
}
func (p *RegisterReq) SetContact(val *MerchantContact) {
	p.Contact = val
}

var fieldIDToName_RegisterReq = map[int16]string{
	1: "contact",
}

func (p *RegisterReq) IsSetContact() bool {
	return p.Contact != nil
}

func (p *RegisterReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RegisterReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RegisterReq) ReadField1(iprot thrift.TProtocol) error {
	p.Contact = NewMerchantContact()
	if err := p.Contact.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RegisterReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RegisterReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RegisterReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("contact", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Contact.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RegisterReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterReq(%+v)", *p)
}

func (p *RegisterReq) DeepEqual(ano *RegisterReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Contact) {
		return false
	}
	return true
}

func (p *RegisterReq) Field1DeepEqual(src *MerchantContact) bool {

	if !p.Contact.DeepEqual(src) {
		return false
	}
	return true
}

type RegisterResp struct {
	BaseResp   *base.BaseResp `thrift:"base_resp,1" json:"base_resp"`
	MerchantId string         `thrift:"merchant_id,2" json:"merchant_id"`
}

func NewRegisterResp() *RegisterResp {
	return &RegisterResp{}
}

var RegisterResp_BaseResp_DEFAULT *base.BaseResp

func (p *RegisterResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return RegisterResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *RegisterResp) GetMerchantId() (v string) {
	return p.MerchantId
}
func (p *RegisterResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}
func (p *RegisterResp) SetMerchantId(val string) {
	p.MerchantId = val
}

var fieldIDToName_RegisterResp = map[int16]string{
	1: "base_resp",
	2: "merchant_id",
}

func (p *RegisterResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RegisterResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RegisterResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RegisterResp) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *RegisterResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MerchantId = v
	}
	return nil
}

func (p *RegisterResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RegisterResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RegisterResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RegisterResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("merchant_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MerchantId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RegisterResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterResp(%+v)", *p)
}

func (p *RegisterResp) DeepEqual(ano *RegisterResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.MerchantId) {
		return false
	}
	return true
}

func (p *RegisterResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RegisterResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.MerchantId, src) != 0 {
		return false
	}
	return true
}

type ReportReq struct {
	ChannelCode string               `thrift:"channel_code,1" json:"channel_code"`
	BaseInfo    *MerchantBaseInfo    `thrift:"base_info,2" json:"base_info"`
	LegalPerson *LegalPerson         `thrift:"legal_person,3" json:"legal_person"`
	Address     *MerchantAddress     `thrift:"address,4" json:"address"`
	LicenseInfo *MerchantLicenseInfo `thrift:"license_info,5" json:"license_info"`
}

func NewReportReq() *ReportReq {
	return &ReportReq{}
}

func (p *ReportReq) GetChannelCode() (v string) {
	return p.ChannelCode
}

var ReportReq_BaseInfo_DEFAULT *MerchantBaseInfo

func (p *ReportReq) GetBaseInfo() (v *MerchantBaseInfo) {
	if !p.IsSetBaseInfo() {
		return ReportReq_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}

var ReportReq_LegalPerson_DEFAULT *LegalPerson

func (p *ReportReq) GetLegalPerson() (v *LegalPerson) {
	if !p.IsSetLegalPerson() {
		return ReportReq_LegalPerson_DEFAULT
	}
	return p.LegalPerson
}

var ReportReq_Address_DEFAULT *MerchantAddress

func (p *ReportReq) GetAddress() (v *MerchantAddress) {
	if !p.IsSetAddress() {
		return ReportReq_Address_DEFAULT
	}
	return p.Address
}

var ReportReq_LicenseInfo_DEFAULT *MerchantLicenseInfo

func (p *ReportReq) GetLicenseInfo() (v *MerchantLicenseInfo) {
	if !p.IsSetLicenseInfo() {
		return ReportReq_LicenseInfo_DEFAULT
	}
	return p.LicenseInfo
}
func (p *ReportReq) SetChannelCode(val string) {
	p.ChannelCode = val
}
func (p *ReportReq) SetBaseInfo(val *MerchantBaseInfo) {
	p.BaseInfo = val
}
func (p *ReportReq) SetLegalPerson(val *LegalPerson) {
	p.LegalPerson = val
}
func (p *ReportReq) SetAddress(val *MerchantAddress) {
	p.Address = val
}
func (p *ReportReq) SetLicenseInfo(val *MerchantLicenseInfo) {
	p.LicenseInfo = val
}

var fieldIDToName_ReportReq = map[int16]string{
	1: "channel_code",
	2: "base_info",
	3: "legal_person",
	4: "address",
	5: "license_info",
}

func (p *ReportReq) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *ReportReq) IsSetLegalPerson() bool {
	return p.LegalPerson != nil
}

func (p *ReportReq) IsSetAddress() bool {
	return p.Address != nil
}

func (p *ReportReq) IsSetLicenseInfo() bool {
	return p.LicenseInfo != nil
}

func (p *ReportReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ReportReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ReportReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChannelCode = v
	}
	return nil
}

func (p *ReportReq) ReadField2(iprot thrift.TProtocol) error {
	p.BaseInfo = NewMerchantBaseInfo()
	if err := p.BaseInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ReportReq) ReadField3(iprot thrift.TProtocol) error {
	p.LegalPerson = NewLegalPerson()
	if err := p.LegalPerson.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ReportReq) ReadField4(iprot thrift.TProtocol) error {
	p.Address = NewMerchantAddress()
	if err := p.Address.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ReportReq) ReadField5(iprot thrift.TProtocol) error {
	p.LicenseInfo = NewMerchantLicenseInfo()
	if err := p.LicenseInfo.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ReportReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReportReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ReportReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("channel_code", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChannelCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ReportReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ReportReq) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("legal_person", thrift.STRUCT, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.LegalPerson.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ReportReq) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("address", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Address.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ReportReq) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("license_info", thrift.STRUCT, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.LicenseInfo.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ReportReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportReq(%+v)", *p)
}

func (p *ReportReq) DeepEqual(ano *ReportReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ChannelCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.BaseInfo) {
		return false
	}
	if !p.Field3DeepEqual(ano.LegalPerson) {
		return false
	}
	if !p.Field4DeepEqual(ano.Address) {
		return false
	}
	if !p.Field5DeepEqual(ano.LicenseInfo) {
		return false
	}
	return true
}

func (p *ReportReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.ChannelCode, src) != 0 {
		return false
	}
	return true
}
func (p *ReportReq) Field2DeepEqual(src *MerchantBaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ReportReq) Field3DeepEqual(src *LegalPerson) bool {

	if !p.LegalPerson.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ReportReq) Field4DeepEqual(src *MerchantAddress) bool {

	if !p.Address.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ReportReq) Field5DeepEqual(src *MerchantLicenseInfo) bool {

	if !p.LicenseInfo.DeepEqual(src) {
		return false
	}
	return true
}

type ReportResp struct {
	BaseResp *base.BaseResp `thrift:"base_resp,1" json:"base_resp"`
}

func NewReportResp() *ReportResp {
	return &ReportResp{}
}

var ReportResp_BaseResp_DEFAULT *base.BaseResp

func (p *ReportResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return ReportResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ReportResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ReportResp = map[int16]string{
	1: "base_resp",
}

func (p *ReportResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ReportResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ReportResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ReportResp) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ReportResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReportResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ReportResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ReportResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReportResp(%+v)", *p)
}

func (p *ReportResp) DeepEqual(ano *ReportResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ReportResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type QueryReportReq struct {
	MerchantId  string `thrift:"merchant_id,1" json:"merchant_id"`
	ChannelCode string `thrift:"channel_code,2" json:"channel_code"`
}

func NewQueryReportReq() *QueryReportReq {
	return &QueryReportReq{}
}

func (p *QueryReportReq) GetMerchantId() (v string) {
	return p.MerchantId
}

func (p *QueryReportReq) GetChannelCode() (v string) {
	return p.ChannelCode
}
func (p *QueryReportReq) SetMerchantId(val string) {
	p.MerchantId = val
}
func (p *QueryReportReq) SetChannelCode(val string) {
	p.ChannelCode = val
}

var fieldIDToName_QueryReportReq = map[int16]string{
	1: "merchant_id",
	2: "channel_code",
}

func (p *QueryReportReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryReportReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QueryReportReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MerchantId = v
	}
	return nil
}

func (p *QueryReportReq) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ChannelCode = v
	}
	return nil
}

func (p *QueryReportReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryReportReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryReportReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("merchant_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MerchantId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryReportReq) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("channel_code", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ChannelCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryReportReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryReportReq(%+v)", *p)
}

func (p *QueryReportReq) DeepEqual(ano *QueryReportReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MerchantId) {
		return false
	}
	if !p.Field2DeepEqual(ano.ChannelCode) {
		return false
	}
	return true
}

func (p *QueryReportReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.MerchantId, src) != 0 {
		return false
	}
	return true
}
func (p *QueryReportReq) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ChannelCode, src) != 0 {
		return false
	}
	return true
}

type ResultReport struct {
	MsgCode int8   `thrift:"msg_code,1" json:"msg_code"`
	Msg     string `thrift:"msg,2" json:"msg"`
}

func NewResultReport() *ResultReport {
	return &ResultReport{}
}

func (p *ResultReport) GetMsgCode() (v int8) {
	return p.MsgCode
}

func (p *ResultReport) GetMsg() (v string) {
	return p.Msg
}
func (p *ResultReport) SetMsgCode(val int8) {
	p.MsgCode = val
}
func (p *ResultReport) SetMsg(val string) {
	p.Msg = val
}

var fieldIDToName_ResultReport = map[int16]string{
	1: "msg_code",
	2: "msg",
}

func (p *ResultReport) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResultReport[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResultReport) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.MsgCode = v
	}
	return nil
}

func (p *ResultReport) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Msg = v
	}
	return nil
}

func (p *ResultReport) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResultReport"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResultReport) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg_code", thrift.BYTE, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.MsgCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResultReport) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Msg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ResultReport) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResultReport(%+v)", *p)
}

func (p *ResultReport) DeepEqual(ano *ResultReport) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MsgCode) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	return true
}

func (p *ResultReport) Field1DeepEqual(src int8) bool {

	if p.MsgCode != src {
		return false
	}
	return true
}
func (p *ResultReport) Field2DeepEqual(src string) bool {

	if strings.Compare(p.Msg, src) != 0 {
		return false
	}
	return true
}

type QueryReportResp struct {
	BaseResp *base.BaseResp `thrift:"base_resp,1" json:"base_resp"`
	Result_  *ResultReport  `thrift:"result,2" json:"result"`
}

func NewQueryReportResp() *QueryReportResp {
	return &QueryReportResp{}
}

var QueryReportResp_BaseResp_DEFAULT *base.BaseResp

func (p *QueryReportResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return QueryReportResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

var QueryReportResp_Result__DEFAULT *ResultReport

func (p *QueryReportResp) GetResult_() (v *ResultReport) {
	if !p.IsSetResult_() {
		return QueryReportResp_Result__DEFAULT
	}
	return p.Result_
}
func (p *QueryReportResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}
func (p *QueryReportResp) SetResult_(val *ResultReport) {
	p.Result_ = val
}

var fieldIDToName_QueryReportResp = map[int16]string{
	1: "base_resp",
	2: "result",
}

func (p *QueryReportResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *QueryReportResp) IsSetResult_() bool {
	return p.Result_ != nil
}

func (p *QueryReportResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryReportResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QueryReportResp) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *QueryReportResp) ReadField2(iprot thrift.TProtocol) error {
	p.Result_ = NewResultReport()
	if err := p.Result_.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *QueryReportResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryReportResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryReportResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryReportResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("result", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Result_.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *QueryReportResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryReportResp(%+v)", *p)
}

func (p *QueryReportResp) DeepEqual(ano *QueryReportResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.Result_) {
		return false
	}
	return true
}

func (p *QueryReportResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *QueryReportResp) Field2DeepEqual(src *ResultReport) bool {

	if !p.Result_.DeepEqual(src) {
		return false
	}
	return true
}

type GetMerchantReq struct {
	MerchantId string `thrift:"merchant_id,1" json:"merchant_id"`
}

func NewGetMerchantReq() *GetMerchantReq {
	return &GetMerchantReq{}
}

func (p *GetMerchantReq) GetMerchantId() (v string) {
	return p.MerchantId
}
func (p *GetMerchantReq) SetMerchantId(val string) {
	p.MerchantId = val
}

var fieldIDToName_GetMerchantReq = map[int16]string{
	1: "merchant_id",
}

func (p *GetMerchantReq) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetMerchantReq[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetMerchantReq) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MerchantId = v
	}
	return nil
}

func (p *GetMerchantReq) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMerchantReq"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetMerchantReq) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("merchant_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MerchantId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetMerchantReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMerchantReq(%+v)", *p)
}

func (p *GetMerchantReq) DeepEqual(ano *GetMerchantReq) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MerchantId) {
		return false
	}
	return true
}

func (p *GetMerchantReq) Field1DeepEqual(src string) bool {

	if strings.Compare(p.MerchantId, src) != 0 {
		return false
	}
	return true
}

type GetMerchantResp struct {
	BaseResp    *base.BaseResp `thrift:"base_resp,1" json:"base_resp"`
	MerchantId  string         `thrift:"merchant_id,2" json:"merchant_id"`
	ChannelList []string       `thrift:"channel_list,3" json:"channel_list"`
}

func NewGetMerchantResp() *GetMerchantResp {
	return &GetMerchantResp{}
}

var GetMerchantResp_BaseResp_DEFAULT *base.BaseResp

func (p *GetMerchantResp) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetMerchantResp_BaseResp_DEFAULT
	}
	return p.BaseResp
}

func (p *GetMerchantResp) GetMerchantId() (v string) {
	return p.MerchantId
}

func (p *GetMerchantResp) GetChannelList() (v []string) {
	return p.ChannelList
}
func (p *GetMerchantResp) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}
func (p *GetMerchantResp) SetMerchantId(val string) {
	p.MerchantId = val
}
func (p *GetMerchantResp) SetChannelList(val []string) {
	p.ChannelList = val
}

var fieldIDToName_GetMerchantResp = map[int16]string{
	1: "base_resp",
	2: "merchant_id",
	3: "channel_list",
}

func (p *GetMerchantResp) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetMerchantResp) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetMerchantResp[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetMerchantResp) ReadField1(iprot thrift.TProtocol) error {
	p.BaseResp = base.NewBaseResp()
	if err := p.BaseResp.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *GetMerchantResp) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MerchantId = v
	}
	return nil
}

func (p *GetMerchantResp) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ChannelList = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ChannelList = append(p.ChannelList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *GetMerchantResp) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMerchantResp"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetMerchantResp) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("base_resp", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetMerchantResp) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("merchant_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.MerchantId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *GetMerchantResp) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("channel_list", thrift.LIST, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ChannelList)); err != nil {
		return err
	}
	for _, v := range p.ChannelList {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *GetMerchantResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetMerchantResp(%+v)", *p)
}

func (p *GetMerchantResp) DeepEqual(ano *GetMerchantResp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BaseResp) {
		return false
	}
	if !p.Field2DeepEqual(ano.MerchantId) {
		return false
	}
	if !p.Field3DeepEqual(ano.ChannelList) {
		return false
	}
	return true
}

func (p *GetMerchantResp) Field1DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetMerchantResp) Field2DeepEqual(src string) bool {

	if strings.Compare(p.MerchantId, src) != 0 {
		return false
	}
	return true
}
func (p *GetMerchantResp) Field3DeepEqual(src []string) bool {

	if len(p.ChannelList) != len(src) {
		return false
	}
	for i, v := range p.ChannelList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type MerchantSvc interface {
	Register(ctx context.Context, req *RegisterReq) (r *RegisterResp, err error)

	Report(ctx context.Context, req *ReportReq) (r *ReportResp, err error)

	QueryReport(ctx context.Context, req *QueryReportReq) (r *QueryReportResp, err error)

	GetMerchant(ctx context.Context, req *GetMerchantReq) (r *GetMerchantResp, err error)
}

type MerchantSvcClient struct {
	c thrift.TClient
}

func NewMerchantSvcClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MerchantSvcClient {
	return &MerchantSvcClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewMerchantSvcClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MerchantSvcClient {
	return &MerchantSvcClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewMerchantSvcClient(c thrift.TClient) *MerchantSvcClient {
	return &MerchantSvcClient{
		c: c,
	}
}

func (p *MerchantSvcClient) Client_() thrift.TClient {
	return p.c
}

func (p *MerchantSvcClient) Register(ctx context.Context, req *RegisterReq) (r *RegisterResp, err error) {
	var _args MerchantSvcRegisterArgs
	_args.Req = req
	var _result MerchantSvcRegisterResult
	if err = p.Client_().Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *MerchantSvcClient) Report(ctx context.Context, req *ReportReq) (r *ReportResp, err error) {
	var _args MerchantSvcReportArgs
	_args.Req = req
	var _result MerchantSvcReportResult
	if err = p.Client_().Call(ctx, "Report", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *MerchantSvcClient) QueryReport(ctx context.Context, req *QueryReportReq) (r *QueryReportResp, err error) {
	var _args MerchantSvcQueryReportArgs
	_args.Req = req
	var _result MerchantSvcQueryReportResult
	if err = p.Client_().Call(ctx, "QueryReport", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *MerchantSvcClient) GetMerchant(ctx context.Context, req *GetMerchantReq) (r *GetMerchantResp, err error) {
	var _args MerchantSvcGetMerchantArgs
	_args.Req = req
	var _result MerchantSvcGetMerchantResult
	if err = p.Client_().Call(ctx, "GetMerchant", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type MerchantSvcProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      MerchantSvc
}

func (p *MerchantSvcProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *MerchantSvcProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *MerchantSvcProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewMerchantSvcProcessor(handler MerchantSvc) *MerchantSvcProcessor {
	self := &MerchantSvcProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Register", &merchantSvcProcessorRegister{handler: handler})
	self.AddToProcessorMap("Report", &merchantSvcProcessorReport{handler: handler})
	self.AddToProcessorMap("QueryReport", &merchantSvcProcessorQueryReport{handler: handler})
	self.AddToProcessorMap("GetMerchant", &merchantSvcProcessorGetMerchant{handler: handler})
	return self
}
func (p *MerchantSvcProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type merchantSvcProcessorRegister struct {
	handler MerchantSvc
}

func (p *merchantSvcProcessorRegister) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MerchantSvcRegisterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Register", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MerchantSvcRegisterResult{}
	var retval *RegisterResp
	if retval, err2 = p.handler.Register(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Register: "+err2.Error())
		oprot.WriteMessageBegin("Register", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Register", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type merchantSvcProcessorReport struct {
	handler MerchantSvc
}

func (p *merchantSvcProcessorReport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MerchantSvcReportArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Report", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MerchantSvcReportResult{}
	var retval *ReportResp
	if retval, err2 = p.handler.Report(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Report: "+err2.Error())
		oprot.WriteMessageBegin("Report", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Report", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type merchantSvcProcessorQueryReport struct {
	handler MerchantSvc
}

func (p *merchantSvcProcessorQueryReport) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MerchantSvcQueryReportArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryReport", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MerchantSvcQueryReportResult{}
	var retval *QueryReportResp
	if retval, err2 = p.handler.QueryReport(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryReport: "+err2.Error())
		oprot.WriteMessageBegin("QueryReport", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryReport", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type merchantSvcProcessorGetMerchant struct {
	handler MerchantSvc
}

func (p *merchantSvcProcessorGetMerchant) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := MerchantSvcGetMerchantArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetMerchant", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := MerchantSvcGetMerchantResult{}
	var retval *GetMerchantResp
	if retval, err2 = p.handler.GetMerchant(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetMerchant: "+err2.Error())
		oprot.WriteMessageBegin("GetMerchant", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetMerchant", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type MerchantSvcRegisterArgs struct {
	Req *RegisterReq `thrift:"req,1" json:"req"`
}

func NewMerchantSvcRegisterArgs() *MerchantSvcRegisterArgs {
	return &MerchantSvcRegisterArgs{}
}

var MerchantSvcRegisterArgs_Req_DEFAULT *RegisterReq

func (p *MerchantSvcRegisterArgs) GetReq() (v *RegisterReq) {
	if !p.IsSetReq() {
		return MerchantSvcRegisterArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MerchantSvcRegisterArgs) SetReq(val *RegisterReq) {
	p.Req = val
}

var fieldIDToName_MerchantSvcRegisterArgs = map[int16]string{
	1: "req",
}

func (p *MerchantSvcRegisterArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantSvcRegisterArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MerchantSvcRegisterArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MerchantSvcRegisterArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewRegisterReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MerchantSvcRegisterArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Register_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MerchantSvcRegisterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MerchantSvcRegisterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MerchantSvcRegisterArgs(%+v)", *p)
}

func (p *MerchantSvcRegisterArgs) DeepEqual(ano *MerchantSvcRegisterArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MerchantSvcRegisterArgs) Field1DeepEqual(src *RegisterReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MerchantSvcRegisterResult struct {
	Success *RegisterResp `thrift:"success,0" json:"success,omitempty"`
}

func NewMerchantSvcRegisterResult() *MerchantSvcRegisterResult {
	return &MerchantSvcRegisterResult{}
}

var MerchantSvcRegisterResult_Success_DEFAULT *RegisterResp

func (p *MerchantSvcRegisterResult) GetSuccess() (v *RegisterResp) {
	if !p.IsSetSuccess() {
		return MerchantSvcRegisterResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MerchantSvcRegisterResult) SetSuccess(x interface{}) {
	p.Success = x.(*RegisterResp)
}

var fieldIDToName_MerchantSvcRegisterResult = map[int16]string{
	0: "success",
}

func (p *MerchantSvcRegisterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantSvcRegisterResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MerchantSvcRegisterResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MerchantSvcRegisterResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewRegisterResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MerchantSvcRegisterResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Register_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MerchantSvcRegisterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MerchantSvcRegisterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MerchantSvcRegisterResult(%+v)", *p)
}

func (p *MerchantSvcRegisterResult) DeepEqual(ano *MerchantSvcRegisterResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MerchantSvcRegisterResult) Field0DeepEqual(src *RegisterResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MerchantSvcReportArgs struct {
	Req *ReportReq `thrift:"req,1" json:"req"`
}

func NewMerchantSvcReportArgs() *MerchantSvcReportArgs {
	return &MerchantSvcReportArgs{}
}

var MerchantSvcReportArgs_Req_DEFAULT *ReportReq

func (p *MerchantSvcReportArgs) GetReq() (v *ReportReq) {
	if !p.IsSetReq() {
		return MerchantSvcReportArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MerchantSvcReportArgs) SetReq(val *ReportReq) {
	p.Req = val
}

var fieldIDToName_MerchantSvcReportArgs = map[int16]string{
	1: "req",
}

func (p *MerchantSvcReportArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantSvcReportArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MerchantSvcReportArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MerchantSvcReportArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewReportReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MerchantSvcReportArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Report_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MerchantSvcReportArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MerchantSvcReportArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MerchantSvcReportArgs(%+v)", *p)
}

func (p *MerchantSvcReportArgs) DeepEqual(ano *MerchantSvcReportArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MerchantSvcReportArgs) Field1DeepEqual(src *ReportReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MerchantSvcReportResult struct {
	Success *ReportResp `thrift:"success,0" json:"success,omitempty"`
}

func NewMerchantSvcReportResult() *MerchantSvcReportResult {
	return &MerchantSvcReportResult{}
}

var MerchantSvcReportResult_Success_DEFAULT *ReportResp

func (p *MerchantSvcReportResult) GetSuccess() (v *ReportResp) {
	if !p.IsSetSuccess() {
		return MerchantSvcReportResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MerchantSvcReportResult) SetSuccess(x interface{}) {
	p.Success = x.(*ReportResp)
}

var fieldIDToName_MerchantSvcReportResult = map[int16]string{
	0: "success",
}

func (p *MerchantSvcReportResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantSvcReportResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MerchantSvcReportResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MerchantSvcReportResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewReportResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MerchantSvcReportResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Report_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MerchantSvcReportResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MerchantSvcReportResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MerchantSvcReportResult(%+v)", *p)
}

func (p *MerchantSvcReportResult) DeepEqual(ano *MerchantSvcReportResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MerchantSvcReportResult) Field0DeepEqual(src *ReportResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MerchantSvcQueryReportArgs struct {
	Req *QueryReportReq `thrift:"req,1" json:"req"`
}

func NewMerchantSvcQueryReportArgs() *MerchantSvcQueryReportArgs {
	return &MerchantSvcQueryReportArgs{}
}

var MerchantSvcQueryReportArgs_Req_DEFAULT *QueryReportReq

func (p *MerchantSvcQueryReportArgs) GetReq() (v *QueryReportReq) {
	if !p.IsSetReq() {
		return MerchantSvcQueryReportArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MerchantSvcQueryReportArgs) SetReq(val *QueryReportReq) {
	p.Req = val
}

var fieldIDToName_MerchantSvcQueryReportArgs = map[int16]string{
	1: "req",
}

func (p *MerchantSvcQueryReportArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantSvcQueryReportArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MerchantSvcQueryReportArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MerchantSvcQueryReportArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewQueryReportReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MerchantSvcQueryReportArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryReport_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MerchantSvcQueryReportArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MerchantSvcQueryReportArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MerchantSvcQueryReportArgs(%+v)", *p)
}

func (p *MerchantSvcQueryReportArgs) DeepEqual(ano *MerchantSvcQueryReportArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MerchantSvcQueryReportArgs) Field1DeepEqual(src *QueryReportReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MerchantSvcQueryReportResult struct {
	Success *QueryReportResp `thrift:"success,0" json:"success,omitempty"`
}

func NewMerchantSvcQueryReportResult() *MerchantSvcQueryReportResult {
	return &MerchantSvcQueryReportResult{}
}

var MerchantSvcQueryReportResult_Success_DEFAULT *QueryReportResp

func (p *MerchantSvcQueryReportResult) GetSuccess() (v *QueryReportResp) {
	if !p.IsSetSuccess() {
		return MerchantSvcQueryReportResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MerchantSvcQueryReportResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryReportResp)
}

var fieldIDToName_MerchantSvcQueryReportResult = map[int16]string{
	0: "success",
}

func (p *MerchantSvcQueryReportResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantSvcQueryReportResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MerchantSvcQueryReportResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MerchantSvcQueryReportResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewQueryReportResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MerchantSvcQueryReportResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryReport_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MerchantSvcQueryReportResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MerchantSvcQueryReportResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MerchantSvcQueryReportResult(%+v)", *p)
}

func (p *MerchantSvcQueryReportResult) DeepEqual(ano *MerchantSvcQueryReportResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MerchantSvcQueryReportResult) Field0DeepEqual(src *QueryReportResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type MerchantSvcGetMerchantArgs struct {
	Req *GetMerchantReq `thrift:"req,1" json:"req"`
}

func NewMerchantSvcGetMerchantArgs() *MerchantSvcGetMerchantArgs {
	return &MerchantSvcGetMerchantArgs{}
}

var MerchantSvcGetMerchantArgs_Req_DEFAULT *GetMerchantReq

func (p *MerchantSvcGetMerchantArgs) GetReq() (v *GetMerchantReq) {
	if !p.IsSetReq() {
		return MerchantSvcGetMerchantArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *MerchantSvcGetMerchantArgs) SetReq(val *GetMerchantReq) {
	p.Req = val
}

var fieldIDToName_MerchantSvcGetMerchantArgs = map[int16]string{
	1: "req",
}

func (p *MerchantSvcGetMerchantArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *MerchantSvcGetMerchantArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MerchantSvcGetMerchantArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MerchantSvcGetMerchantArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetMerchantReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MerchantSvcGetMerchantArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMerchant_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MerchantSvcGetMerchantArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *MerchantSvcGetMerchantArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MerchantSvcGetMerchantArgs(%+v)", *p)
}

func (p *MerchantSvcGetMerchantArgs) DeepEqual(ano *MerchantSvcGetMerchantArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *MerchantSvcGetMerchantArgs) Field1DeepEqual(src *GetMerchantReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type MerchantSvcGetMerchantResult struct {
	Success *GetMerchantResp `thrift:"success,0" json:"success,omitempty"`
}

func NewMerchantSvcGetMerchantResult() *MerchantSvcGetMerchantResult {
	return &MerchantSvcGetMerchantResult{}
}

var MerchantSvcGetMerchantResult_Success_DEFAULT *GetMerchantResp

func (p *MerchantSvcGetMerchantResult) GetSuccess() (v *GetMerchantResp) {
	if !p.IsSetSuccess() {
		return MerchantSvcGetMerchantResult_Success_DEFAULT
	}
	return p.Success
}
func (p *MerchantSvcGetMerchantResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetMerchantResp)
}

var fieldIDToName_MerchantSvcGetMerchantResult = map[int16]string{
	0: "success",
}

func (p *MerchantSvcGetMerchantResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *MerchantSvcGetMerchantResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MerchantSvcGetMerchantResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MerchantSvcGetMerchantResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetMerchantResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *MerchantSvcGetMerchantResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetMerchant_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MerchantSvcGetMerchantResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *MerchantSvcGetMerchantResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MerchantSvcGetMerchantResult(%+v)", *p)
}

func (p *MerchantSvcGetMerchantResult) DeepEqual(ano *MerchantSvcGetMerchantResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *MerchantSvcGetMerchantResult) Field0DeepEqual(src *GetMerchantResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
